#
# Copyright (c) FIRST and other WPILib contributors.
# Open Source Software; you can modify and/or share it under the terms of
# the WPILib BSD license file in the root directory of this project.
#

#
# See the notes for the other physics sample
#

import math
import wpilib
import wpilib.simulation as simlib
import wpimath
from pyfrc.physics.core import PhysicsInterface
from wpimath.kinematics import SwerveDrive4Kinematics, SwerveModuleState, SwerveModulePosition
import wpimath.geometry as geo
from pyfrc.physics.units import units
from wpilib.simulation import SingleJointedArmSim, DCMotorSim
from wpimath.system.plant import DCMotor
import rev


import constants

from robot import MyRobot

import typing
if typing.TYPE_CHECKING:  # not sure how dropbears are getting their classes to work - this will be offseason research
    pass


class PhysicsEngine:
    """
    Simulates our swerve drive - still clunky, we should be able to get our turn motors not from the dash
    """

    def __init__(self, physics_controller: PhysicsInterface, robot: MyRobot):
        """
        :param physics_controller: `pyfrc.physics.core.Physics` object
                                   to communicate simulation effects to
        :param robot: your robot object
        """
        self.physics_controller = physics_controller  # must have for simulation
        self.robot = robot
        self.counter = 0

        # NavX (SPI interface) - no idea why the "4" is there, seems to be the default name generated by the navx code
        self.navx = simlib.SimDeviceSim("navX-Sensor[4]")
        self.navx_yaw = self.navx.getDouble("Yaw")  # for some reason it seems we have to set Yaw and not Angle
        self.navx_angle = self.navx.getDouble("Angle")

                # create a dictionary so we can refer to the sparks by name and get their relevant parameters
        self.spark_dict = {}
        # kinematics chassis speeds wants them in same order as in original definition - unfortunate ordering
        self.spark_drives = ['lf_drive', 'rf_drive', 'lb_drive', 'rb_drive']
        self.spark_drive_ids = [21, 25, 23, 27]  # keep in this order - based on our kinematics definition
        self.spark_turns = ['lf_turn', 'rf_turn', 'lb_turn', 'rb_turn']
        self.spark_turn_ids = [20, 24, 22, 26]  # keep in this order

        # Other devices
        self.spark_peripherals = ['br_crank', 'bl_crank', 'tr_crank', 'tl_crank', 't_shooter','b_shooter']
        self.spark_peripheral_ids = [6, 7, 8, 9, 10, 11]

        # allow ourselves to access the simdevice's Position, Velocity, Applied Output, etc
        self.spark_names = self.spark_drives + self.spark_turns + self.spark_peripherals
        self.spark_ids = self.spark_drive_ids + self.spark_turn_ids + self.spark_peripheral_ids
        for idx, (spark_name, can_id) in enumerate(zip(self.spark_names, self.spark_ids)):
            spark = simlib.SimDeviceSim(f'SPARK MAX [{can_id}]')
            position = spark.getDouble('Position')
            velocity = spark.getDouble('Velocity')
            output = spark.getDouble('Applied Output')
            self.spark_dict.update({spark_name: {'controller': spark, 'position': position,
                                                 'velocity': velocity, 'output': output}})
        for key, value in self.spark_dict.items():  # see if these make sense
            print(f'{key}: {value}')

        self.distances = [0, 0, 0, 0]

        # sensors

        # set up the initial location of the robot on the field
        self.x, self.y = constants.k_start_x, constants.k_start_y
        self.theta = 0
        initial_pose = geo.Pose2d(0, 0, geo.Rotation2d())
        self.physics_controller.move_robot(geo.Transform2d(self.x, self.y, self.theta))

        # Arm simulation - based on Dustin's 6367 robot
        # motor = wpimath.system.plant.DCMotor.NEO(1)
        # self.armSim = wpilib.simulation.SingleJointedArmSim(
        #     motor,
        #     constants.k_crank_arm_dict['gearing'],
        #     wpilib.simulation.SingleJointedArmSim.estimateMOI(
        #         constants.k_crank_arm_dict['arm_length'],
        #         constants.k_crank_arm_dict['arm_mass'],
        #     ),
        #     constants.k_crank_arm_dict['arm_length'],
        #     math.radians(constants.k_crank_arm_dict['min_angle']),
        #     math.radians(constants.k_crank_arm_dict['max_angle']),
        #     True,
        #     math.radians(90)
        # )

        # Create a Mechanism2d display of an Arm
        self.mech2d = wpilib.Mechanism2d(60, 60)
        self.armBase = self.mech2d.getRoot("ArmBase", 30, 30)
        self.crank_arm_mech = self.armBase.appendLigament(
            "Crank Arm Tower", 22, 90, 12, wpilib.Color8Bit(wpilib.Color.kGreen)
        )
        self.shooter_arm_mech = self.crank_arm_mech.appendLigament(
            "Shooter Arm", 19, 175, 20, wpilib.Color8Bit(wpilib.Color.kYellow)
        )

        # Put Mechanism to SmartDashboard
        wpilib.SmartDashboard.putData("Arm Sim", self.mech2d)

        self.arm_motor: rev.CANSparkMax = robot.container.crank_arm.motor
        #self.arm_motor_sim = wpilib.simulation.PWMSim(self.arm_motor)

    def update_sim(self, now: float, tm_diff: float) -> None:
        """
        Called when the simulation parameters for the program need to be
        updated.

        :param now: The current time as a float
        :param tm_diff: The amount of time that has passed since the last
                        time that this function was called
        """
        self.counter += 1

        # attempt to update the real robot's odometry
        self.distances = [pos + tm_diff * self.spark_dict[drive]['velocity'].value for pos, drive in zip(self.distances, self.spark_drives)]
        [self.spark_dict[drive]['position'].set(self.spark_dict[drive]['position'].value + tm_diff * self.spark_dict[drive]['velocity'].value ) for drive in self.spark_drives]

        wpilib.SmartDashboard.putNumberArray('sim_pose', [self.x, self.y, self.theta])
        wpilib.SmartDashboard.putNumberArray('drive_pose', [self.x, self.y, self.theta])  # need this for 2429 python dashboard to update

        crank_angle, crank_velocity = self.spark_dict['bl_crank']['position'].value, self.spark_dict['bl_crank']['velocity'].value
        shooter_arm_angle, shooter_arm_velocity = self.spark_dict['tr_crank']['position'].value, self.spark_dict['tr_crank']['velocity'].value
        #self.crank_arm.setState(crank_angle, crank_velocity)

        # Update the arm
        voltage = wpilib.simulation.RoboRioSim.getVInVoltage()
        #self.armSim.setInputVoltage(self.arm_motor_sim.getSpeed() * voltage)
        #self.armSim.update(tm_diff)
        #arm_angle = self.armSim.getAngleDegrees()

        # self.armSim.setState(crank_angle, crank_velocity)
        self.crank_arm_mech.setAngle(crank_angle_to_sim(crank_angle))
        self.shooter_arm_mech.setAngle(shooter_angle_to_sim(shooter_arm_angle))

def crank_angle_to_sim(crank_angle):
    # for us 90 is straight up and the angle is positive CW (looking at robot from the right)
    # for sim 90 is up but we are positive CCW - so take 90=90 but we're reversed from there
    return 90 + (90-math.degrees(crank_angle))  # same as 180 - crank_angle
    pass
def shooter_angle_to_sim(shooter_angle):
    # for the shooter our zero (horizontal or perpendicular to the arm) is the sim's 90
    return 90 - math.degrees(shooter_angle)


